/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main.Form;

import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.table.TableModel;

/**
 *
 * @author Asus
 */
public class Dashboard extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Dashboard.class.getName());

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
            txt_list.setDefaultEditor(Object.class, null);

    // üö´ Kh√¥ng cho k√©o th·∫£/s·∫Øp x·∫øp c·ªôt
    txt_list.getTableHeader().setReorderingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnDowload = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtmapb = new javax.swing.JTextField();
        btnseek = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_list = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Cloud");

        btnDowload.setText("Dowload File");
        btnDowload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDowloadActionPerformed(evt);
            }
        });

        btnUpdate.setText("Upload File");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jLabel2.setText("Nh·∫≠p M√£ ph√≤ng ban: ");

        btnseek.setText("T√¨m");
        btnseek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnseekActionPerformed(evt);
            }
        });

        txt_list.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "File Name", "Department", "File Location"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        txt_list.setCellSelectionEnabled(true);
        jScrollPane2.setViewportView(txt_list);
        txt_list.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtmapb, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDowload, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btndelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnseek, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtmapb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnseek))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnDowload, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btndelete, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDowloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDowloadActionPerformed
    int selectedRow = txt_list.getSelectedRow(); // L·∫•y d√≤ng ƒë∆∞·ª£c ch·ªçn
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn file c·∫ßn t·∫£i xu·ªëng!");
        return;
    }

    // L·∫•y t√™n file t·ª´ c·ªôt ƒë·∫ßu ti√™n (c·ªôt 0)
    String fileName = txt_list.getValueAt(selectedRow, 0).toString();

    // File g·ªëc trong th∆∞ m·ª•c uploads
    File sourceFile = new File("uploads", fileName);
    if (!sourceFile.exists()) {
        JOptionPane.showMessageDialog(this, "File kh√¥ng t·ªìn t·∫°i trong th∆∞ m·ª•c uploads!");
        return;
    }

    // M·ªü h·ªôp tho·∫°i ch·ªçn n∆°i l∆∞u
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Ch·ªçn n∆°i l∆∞u file");
    fileChooser.setSelectedFile(new File(fileName));

    int userSelection = fileChooser.showSaveDialog(this);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File destinationFile = fileChooser.getSelectedFile();

        try (java.nio.channels.FileChannel sourceChannel = new java.io.FileInputStream(sourceFile).getChannel();
             java.nio.channels.FileChannel destChannel = new java.io.FileOutputStream(destinationFile).getChannel()) {

            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
            JOptionPane.showMessageDialog(this, "T·∫£i xu·ªëng th√†nh c√¥ng:\n" + destinationFile.getAbsolutePath());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi t·∫£i file xu·ªëng: " + e.getMessage());
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnDowloadActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       try {
        // L·∫•y m√£ ph√≤ng ban
        String mapb = txtmapb.getText().trim();
        if (mapb.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p m√£ ph√≤ng ban tr∆∞·ªõc khi t·∫£i file!",
                    "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Ch·ªçn file c·∫ßn upload
        JFileChooser chooser = new JFileChooser();
        int result = chooser.showOpenDialog(this);
        if (result != JFileChooser.APPROVE_OPTION) {
            return; // Ng∆∞·ªùi d√πng b·∫•m cancel
        }

        File selectedFile = chooser.getSelectedFile();
        if (!selectedFile.exists()) {
            JOptionPane.showMessageDialog(this, "File kh√¥ng t·ªìn t·∫°i!");
            return;
        }

        // T·∫°o th∆∞ m·ª•c uploads/<maPB>
        File uploadDir = new File("uploads/" + mapb);
        if (!uploadDir.exists()) {
            uploadDir.mkdirs();
        }

        // Sao ch√©p file v√†o th∆∞ m·ª•c uploads/<maPB>/
        File destFile = new File(uploadDir, selectedFile.getName());
        Files.copy(selectedFile.toPath(), destFile.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);

        JOptionPane.showMessageDialog(this, "T·∫£i file th√†nh c√¥ng v√†o: " + destFile.getPath());

        // === GHI TH√îNG TIN V√ÄO uploads/data.txt ===
        File dataFile = new File("uploads/data.txt");
        if (!dataFile.exists()) {
            dataFile.getParentFile().mkdirs();
            dataFile.createNewFile();
        }

        // Ghi d·ªØ li·ªáu theo ƒë·ªãnh d·∫°ng: maPB,relativePath
        String relativePath = mapb + "/" + selectedFile.getName();
        try (FileWriter fw = new FileWriter(dataFile, true)) {
            fw.write(mapb + "," + relativePath + System.lineSeparator());
        }

        // C·∫≠p nh·∫≠t l·∫°i b·∫£ng hi·ªÉn th·ªã
        DefaultTableModel model = (DefaultTableModel) txt_list.getModel();
        model.addRow(new Object[]{selectedFile.getName(), (destFile.length() / 1024) + " KB", mapb});

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "L·ªói khi t·∫£i file: " + e.getMessage(),
                "L·ªói", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnseekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnseekActionPerformed
                                            
    String keyword = txtmapb.getText().trim();

    if (keyword.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p m√£ ph√≤ng ban c·∫ßn t√¨m!",
                "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
        return;
    }

    File uploadDir = new File("uploads");
    File dataFile = new File(uploadDir, "data.txt");

    if (!dataFile.exists()) {
        JOptionPane.showMessageDialog(this, "Ch∆∞a c√≥ d·ªØ li·ªáu upload n√†o!",
                "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String[] columnNames = {"T√™n File", "K√≠ch th∆∞·ªõc (KB)", "M√£ Ph√≤ng Ban"};
    DefaultTableModel model = new DefaultTableModel(columnNames, 0);

    try (BufferedReader br = new BufferedReader(new FileReader(dataFile))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] parts = line.split(",", 2);
            if (parts.length == 2) {
                String maPB = parts[0].trim();
                String relativePath = parts[1].trim(); // v√≠ d·ª• "2/abc.pdf"

                if (maPB.equalsIgnoreCase(keyword)) {
                    File f = new File(uploadDir, relativePath); // uploads/2/abc.pdf
                    if (f.exists()) {
                        long kb = Math.max(1, f.length() / 1024);
                        model.addRow(new Object[]{f.getName(), kb + " KB", maPB});
                    }
                }
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "L·ªói khi ƒë·ªçc d·ªØ li·ªáu: " + e.getMessage());
        e.printStackTrace();
    }

    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this,
                "Kh√¥ng t√¨m th·∫•y file n√†o thu·ªôc m√£ ph√≤ng ban: " + keyword,
                "K·∫øt qu·∫£ t√¨m ki·∫øm", JOptionPane.INFORMATION_MESSAGE);
    }

    txt_list.setModel(model);


    }//GEN-LAST:event_btnseekActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        int selectedRow = txt_list.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn file c·∫ßn x√≥a!");
            return;
        }

        Object fileObj = txt_list.getValueAt(selectedRow, 2);
        if (fileObj == null) {
            JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n file ƒë·ªÉ x√≥a!");
            return;
        }

        String filePath = fileObj.toString();
        File fileToDelete = new File(filePath);

        int confirm = JOptionPane.showConfirmDialog(this,
            "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a file n√†y?\n" + filePath,
            "X√°c nh·∫≠n x√≥a",
            JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            if (fileToDelete.exists()) {
                if (fileToDelete.delete()) {
                    DefaultTableModel model = (DefaultTableModel) txt_list.getModel();
                    model.removeRow(selectedRow);
                    JOptionPane.showMessageDialog(this, "ƒê√£ x√≥a file th√†nh c√¥ng!");
                } else {
                    JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ x√≥a file! C√≥ th·ªÉ file ƒëang m·ªü ho·∫∑c b·ªã kh√≥a.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "File kh√¥ng t·ªìn t·∫°i, ch·ªâ x√≥a kh·ªèi danh s√°ch!");
                DefaultTableModel model = (DefaultTableModel) txt_list.getModel();
                model.removeRow(selectedRow);
            }
        }
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Dashboard().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDowload;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnseek;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable txt_list;
    private javax.swing.JTextField txtmapb;
    // End of variables declaration//GEN-END:variables

    private void openFileChooser() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
