package Main.App.security;

import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.util.Base64;

public class Decrypt {

    private static final int GCM_NONCE_LENGTH = 12;
    private static final int GCM_TAG_LENGTH = 128;

    // ‚úÖ Gi·∫£i m√£ d·ªØ li·ªáu AES + RSA k·∫øt h·ª£p
    public static String decrypt(String base64Input, PrivateKey rsaPrivateKey) {
        try {
            byte[] allBytes = Base64.getDecoder().decode(base64Input);
            ByteBuffer buffer = ByteBuffer.wrap(allBytes);

            // 1Ô∏è‚É£ L·∫•y ƒë·ªô d√†i & n·ªôi dung kh√≥a AES ƒë√£ m√£ h√≥a b·∫±ng RSA
            int rsaKeyLen = buffer.getInt();
            byte[] encryptedAesKey = new byte[rsaKeyLen];
            buffer.get(encryptedAesKey);

            // 2Ô∏è‚É£ L·∫•y nonce v√† d·ªØ li·ªáu m√£ h√≥a
            byte[] nonce = new byte[GCM_NONCE_LENGTH];
            buffer.get(nonce);

            byte[] encryptedData = new byte[buffer.remaining()];
            buffer.get(encryptedData);

            // 3Ô∏è‚É£ Gi·∫£i m√£ AES key b·∫±ng RSA private key
            Cipher rsaCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            rsaCipher.init(Cipher.DECRYPT_MODE, rsaPrivateKey);
            byte[] aesKeyBytes = rsaCipher.doFinal(encryptedAesKey);

            SecretKeySpec aesKey = new SecretKeySpec(aesKeyBytes, "AES");

            // 4Ô∏è‚É£ Gi·∫£i m√£ d·ªØ li·ªáu b·∫±ng AES key
            Cipher aesCipher = Cipher.getInstance("AES/GCM/NoPadding");
            GCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH, nonce);
            aesCipher.init(Cipher.DECRYPT_MODE, aesKey, spec);

            byte[] decrypted = aesCipher.doFinal(encryptedData);
            return new String(decrypted, StandardCharsets.UTF_8);

        } catch (Exception e) {
            throw new RuntimeException("L·ªói gi·∫£i m√£: " + e.getMessage(), e);
        }
    }

    // ‚úÖ Test nhanh
    public static void main(String[] args) throws Exception {
        // Sinh c√πng c·∫∑p kh√≥a RSA
        java.security.KeyPair keyPair = Encrypt.generateRSAKeyPair();

        String originalText = "ƒê√¢y l√† d·ªØ li·ªáu b√≠ m·∫≠t c·∫ßn b·∫£o v·ªá!";
        String encrypted = Encrypt.encrypt(originalText, keyPair.getPublic());
        String decrypted = decrypt(encrypted, keyPair.getPrivate());

        System.out.println("üîí ƒê√£ m√£ h√≥a: " + encrypted);
        System.out.println("üîì Gi·∫£i m√£ l·∫°i: " + decrypted);
    }
}
